import { Octokit } from '@octokit/rest';
import { ReviewSummary, ReviewComment } from '../ai/claude-reviewer';

export class GitHubClient {
  private octokit: Octokit;

  constructor(githubToken: string) {
    this.octokit = new Octokit({
      auth: githubToken,
    });
  }

  async postReviewComment(
    owner: string,
    repo: string,
    pullNumber: number,
    reviewSummary: ReviewSummary
  ): Promise<void> {
    try {
      // Create the main review with overall summary
      const reviewBody = this.formatMainReviewBody(reviewSummary);
      
      await this.octokit.rest.pulls.createReview({
        owner,
        repo,
        pull_number: pullNumber,
        body: reviewBody,
        event: this.determineReviewEvent(reviewSummary.overallScore),
      });

      // Post individual line comments
      for (const comment of reviewSummary.comments) {
        if (comment.line) {
          await this.postLineComment(owner, repo, pullNumber, comment);
        }
      }

    } catch (error) {
      console.error('Error posting review to GitHub:', error);
      throw error;
    }
  }

  private async postLineComment(
    owner: string,
    repo: string,
    pullNumber: number,
    comment: ReviewComment
  ): Promise<void> {
    try {
      // Get the commit SHA for the PR
      const { data: pr } = await this.octokit.rest.pulls.get({
        owner,
        repo,
        pull_number: pullNumber,
      });

      await this.octokit.rest.pulls.createReviewComment({
        owner,
        repo,
        pull_number: pullNumber,
        commit_id: pr.head.sha,
        path: comment.file,
        line: comment.line,
        body: this.formatLineComment(comment),
      });
    } catch (error) {
      console.error(`Error posting line comment for ${comment.file}:${comment.line}:`, error);
      // Don't throw here - continue with other comments
    }
  }

  private formatMainReviewBody(reviewSummary: ReviewSummary): string {
    const scoreEmoji = this.getScoreEmoji(reviewSummary.overallScore);
    
    return `
## 🤖 AI Code Review Results ${scoreEmoji}

**Overall Score: ${reviewSummary.overallScore}/100**

### 📋 Summary
${reviewSummary.summary}

### 💡 Recommendations
${reviewSummary.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

### 📊 Review Statistics
- **Total Comments**: ${reviewSummary.comments.length}
- **High Priority Issues**: ${reviewSummary.comments.filter(c => c.priority === 'high').length}
- **Medium Priority Issues**: ${reviewSummary.comments.filter(c => c.priority === 'medium').length}
- **Low Priority Issues**: ${reviewSummary.comments.filter(c => c.priority === 'low').length}

---
*This review was generated by AI Code Reviewer powered by Claude* 🚀
    `.trim();
  }

  private formatLineComment(comment: ReviewComment): string {
    const priorityEmoji = this.getPriorityEmoji(comment.priority);
    const typeEmoji = this.getTypeEmoji(comment.type);
    
    return `${typeEmoji} **${comment.type.toUpperCase()}** ${priorityEmoji}\n\n${comment.body}`;
  }

  private determineReviewEvent(score: number): 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT' {
    if (score >= 80) {
      return 'APPROVE';
    } else if (score < 60) {
      return 'REQUEST_CHANGES';
    } else {
      return 'COMMENT';
    }
  }

  private getScoreEmoji(score: number): string {
    if (score >= 90) return '🎉';
    if (score >= 80) return '✅';
    if (score >= 70) return '👍';
    if (score >= 60) return '⚠️';
    return '🚨';
  }

  private getPriorityEmoji(priority: ReviewComment['priority']): string {
    switch (priority) {
      case 'high': return '🔴';
      case 'medium': return '🟡';
      case 'low': return '🔵';
      default: return '⚪';
    }
  }

  private getTypeEmoji(type: ReviewComment['type']): string {
    switch (type) {
      case 'issue': return '🐛';
      case 'suggestion': return '💭';
      case 'improvement': return '⚡';
      case 'praise': return '👏';
      default: return '💬';
    }
  }

  async addPullRequestLabel(
    owner: string,
    repo: string,
    pullNumber: number,
    score: number
  ): Promise<void> {
    try {
      const label = this.getScoreLabel(score);
      
      await this.octokit.rest.issues.addLabels({
        owner,
        repo,
        issue_number: pullNumber,
        labels: [label],
      });
    } catch (error) {
      console.error('Error adding label to PR:', error);
      // Don't throw - labels are optional
    }
  }

  private getScoreLabel(score: number): string {
    if (score >= 90) return 'ai-review: excellent';
    if (score >= 80) return 'ai-review: good';
    if (score >= 70) return 'ai-review: needs-improvement';
    if (score >= 60) return 'ai-review: review-required';
    return 'ai-review: needs-work';
  }
}